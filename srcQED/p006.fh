! New scheme QED : Phys. Rev. E (2010) ====05/09
!
! For simplicity variables names are similar as in the paper
!
! used variables:  
!  dp(1:3), u(1:3), gamma2, udp, radDt, q, omegaC, Angle1, Angle2
!
      if(logRadIn) then !--------------------------------------------------!
          !
          dp= p-R(nDim+1:nDim+3,n)        ! p^{n+1/2}-p^{n-1/2}
          !
	  udp= dot_product(u,dp)          ! (u * dp)
          !
          !
          !--QED--- Chi, q -------------------------------------------
          !
          ! constRad= ( \tau_0 / T) /dt
          ! constCompton= (3/2) * ( \lambdabar_C / \lambda) /dt
          ! constComptonInv=( \lambda / \lambdabar_C ) / (2\pi)
          !
          !Chi=sqrt(I_cl/I_C) 
          !
          Chi=sqrt((dot_product(dp,dp)-(udp)**2)*gamma2)*constCompton
          !
          !q=I_QED/I_cl
          !iChi=nint( Chi*(nChi-1) )+1 !mistake for ChiMax/=1!
          iChi=nint( Chi/ChiMax*(nChi-1) )+1
          if(iChi > nChi) then
             !open(unit=20,file='stop.run',form='formatted')
             !write(20,*)'STOP: PROC:',mpiProc,&
              !    ' iTime,time=',iTime,time,' Chi,R=',Chi,R(:,n)
                  ! 'Chi=',Chi,'  exceeds ',ONE+HALF/(nChi-1))
             !close(20)
             iChi=nChi
          endif   
          !
          q=radChi(iChi)
          !
          !--Radiation------------------------------------------------
          ! 
          du= (dp-u*udp)/(ONE+udp*constRad*q)*constRad*q
          !
          radDt=dot_product(du,dp)*gamma2  !I_QED * dt
          !
	  rad=rad+radDt		             ! radiation sum
          !
          if (nRD > 5) then ! for test particle	
             !RD(1:3,n)=p       ! intermediate
             !RD(4,n)=Chi 
             !RD(5,n)=q
             !RD(6,n)=radDt
          end if

          !--Radiation distribution
          !              !
	  if (radDt > 1.e-20) then !?? angular radiation distribution >
		!
		! -------- Frequency---------------------------- 
		!	
                omegaC= sqrt(gamma2) * chi * constComptonInv
                !
		j=nint( alog( omegaC ) /rFreqMax*nFreq )
		!
		if (j < 1) j=1	
		if (j > nFreq) j=nFreq	
                !
                ! ---------Angular distribution ----------------
	  	tmp2=sqrt(dot_product(u,u)) 
                !	
	  	if(tmp2 > 1.e-5) then 	
                        Angle1=acos(u(1)/tmp2)
			i=nint(Angle1 /PI*nAngle)
	  	else 
			i=nAngle/2+1
	  	end if
	  	if (i < 1) i=1
	  	if (i > nAngle) i=nAngle
		!
	  	if(abs(u(2)) > 1.e-5) then 
                        Angle2=atan(u(3)/u(2))
                       	k=nint(Angle2/PI*nAngle2/2)+1	
                        if( u(2) < ZERO ) &
                                k=k+nAngle2/2
                        if( (u(2) >= ZERO) .and. (u(3) < ZERO) ) &
                                k=k+nAngle2
	  	else 
			k=1
	  	end if
		if (k < 1) k=k+nAngle2 !!! k=1	
		if (k > nAngle2) k=k-nAngle2 !!! k=nAngle2
		!	
		radAngle(i,k)=radAngle(i,k)+radDt
                !
                tmp2=radDt/omegaC	! distribution I/w
                !
		!radFreq(i,k,j,iChi)=radFreq(i,k,j,iChi)+tmp2
                !
                if (i >= 90) then ! >>backward
                   radFreqChi0(j,iChi)=radFreqChi0(j,iChi)+tmp2
                   radFreqChiCos0(j,iChi)=radFreqChiCos0(j,iChi) &
                        +tmp2*abs(cos(Angle1))
                else              ! >>forward
                   radFreqChi1(j,iChi)=radFreqChi1(j,iChi)+tmp2
                   radFreqChiCos1(j,iChi)=radFreqChiCos1(j,iChi) &
                        +tmp2*abs(cos(Angle1))
                end if

		!	
	  end if	! angular & frequency & Chi radiation distribution <
          !
          ! -----------------------------------------------------------
          ! Final momentum with radiation | bForce = (Q/M) * B * dt/2
          !-----------------------------------------------------------
          p=p+ cross_product(du,bForce)*TWO-u*radDt !rad force correction!
          !-----------------------------------------------------------
          if (nRD > 12) then ! for test particle	
             !RD(7,n)=omegaC
             !RD(8,n)=Angle1
             !RD(9,n)=Angle2
             ! 
             !RD(10,n)=1.*iChi
             !RD(11,n)=1.*j !omegaC
             !RD(12,n)=1.*i !Angle1
             !RD(13,n)=1.*k !Angle2
          end if
          !
          if (nRD > 18) then ! for test particle	
             !RD(14:16,n)=eForce/dtFactorIn
             !RD(17:19,n)=bForce/dtFactorIn
          end if
          !
       end if !-----------------------------------------! ====05/09
